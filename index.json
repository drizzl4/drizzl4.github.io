[{"content":"20210803 读书计划\n Java 8 Action  20210808 观影计划\n 爱在黎明破晓前, 爱在日落黄昏时, 爱在午夜降临前 迷失东京 在哥伦布  20210815 读书计划\n MySQL技术内幕  ","permalink":"https://init.best/posts/plan/","summary":"My Plan Record","title":"Plan"},{"content":"Blog 成功转移时间：20210817 01:19\n","permalink":"https://init.best/about/","summary":"about","title":"About"},{"content":"基础类 Dish\npublic class Dish { private final String name; private final boolean vegetarian; private final int calories; private final Type type; public Dish(String name, boolean vegetarian, int calories, Type type) { this.name = name; this.vegetarian = vegetarian; this.calories = calories; this.type = type; } public String getName() { return name; } public boolean isVegetarian() { return vegetarian; } public int getCalories() { return calories; } public Type getType() { return type; } @Override public String toString() { return name; } public enum Type { MEAT, FISH, OTHER } } menu\nList\u0026lt;Dish\u0026gt; menu = Arrays.asList( new Dish(\u0026#34;pork\u0026#34;, false, 800, Dish.Type.MEAT), 3 new Dish(\u0026#34;beef\u0026#34;, false, 700, Dish.Type.MEAT), new Dish(\u0026#34;chicken\u0026#34;, false, 400, Dish.Type.MEAT), new Dish(\u0026#34;french fries\u0026#34;, true, 530, Dish.Type.OTHER), new Dish(\u0026#34;rice\u0026#34;, true, 350, Dish.Type.OTHER), new Dish(\u0026#34;season fruit\u0026#34;, true, 120, Dish.Type.OTHER), new Dish(\u0026#34;pizza\u0026#34;, true, 550, Dish.Type.OTHER), new Dish(\u0026#34;prawns\u0026#34;, false, 300, Dish.Type.FISH), 5 new Dish(\u0026#34;salmon\u0026#34;, false, 450, Dish.Type.FISH) ); 基础功能 筛选某一属性 List\u0026lt;Dish\u0026gt; vegetarianMenu = menu.stream() .filter(Dish::isVegetarian) .collect(toList()); 筛选去重 List\u0026lt;Integer\u0026gt; nembers = Arrays.asList(1,2,1,3,3,2,4); numbers.stream() .filter(i -\u0026gt; i%2==0) .distinct() .forEach(System.out::println); 限制条数 limit可以用在无序流或者有序流，无序流不会按照任何顺序排序。\nList\u0026lt;Dish\u0026gt; dishes = menu.stream() .filter(d -\u0026gt; d.getCalories() \u0026gt; 300) .limit(3) .collect(toList()); 跳过前N个元素 List\u0026lt;Dish\u0026gt; dishes = menu.stream() .filter(d -\u0026gt; d.getCalories \u0026gt;300) .skip(2) .collect(toList()); 映射 流的扁平化 例如[\u0026ldquo;Helllo\u0026rdquo;,\u0026ldquo;World\u0026rdquo;]，将字母去重之后，返回[\u0026ldquo;H\u0026rdquo;,\u0026ldquo;e\u0026rdquo;,\u0026ldquo;l\u0026rdquo;, \u0026ldquo;o\u0026rdquo;,\u0026ldquo;W\u0026rdquo;,\u0026ldquo;r\u0026rdquo;,\u0026ldquo;d\u0026rdquo;]\n如果使用：\nwords.stream() .map(word -\u0026gt; word.splot(\u0026#34;\u0026#34;)) .distinct() .collect(toList()); map返回的其实是Stream\u0026lt;String[]\u0026gt;类型，比较的是Hello与World的不同\n如果使用：\nwords.stream() .map(word -\u0026gt; word.split(\u0026#34;\u0026#34;)) .map(Arrays::stream) .distinct() .collect(toList()); 这代表，map将所有单个的字符转化为一个流，每个流中只存在一个字符\n使用flatMap得到正确结果\nwords.stream() .map(word -\u0026gt; word.split(\u0026#34;\u0026#34;)) .flatMap(Array::stream) .distinct() .collect(Collectors.toList()); flatMap将会将所有单个的流合成一个流\n查找和匹配 使用allMatch、anyMatch、noneMatch、findFirst和findAny方法进行匹配查找\nanyMatch方法 流中是否有一个元素能够匹配给定的谓词\nif(menu.stream().anyMatch(Dish::isVegetarian)){ //anymatch方法返回一个boolean类型 \tSystem.out.println(\u0026#34;The menu is (somewhat) vegetarian friendly!!\u0026#34;); } allMatch方法 流中的所有元素是否都能匹配给定的谓词\nboolean isHealthy = menu.stream() .allMatch(d -\u0026gt; d.getCalories \u0026lt;1000); noneMatch方法 流中所有元素都无法与给定的谓词匹配\nboolean isHealthy = menu.stream() .noneMatch(d -\u0026gt; d.getCalories \u0026lt;1000);  短路求值\n有些操作不需要处理整个流就能得到结果。例如，假设你需要对一个用and连起来的大布 尔表达式求值。不管表达式有多长，你只需找到一个表达式为false，就可以推断整个表达式 将返回false，所以用不着计算整个表达式。这就是短路。\n对于流而言，某些操作(例如allMatch、anyMatch、noneMatch、findFirst和findAny) 不用处理整个流就能得到结果。只要找到一个元素，就可以有结果了。同样，limit也是一个 短路操作:它只需要创建一个给定大小的流，而用不着处理流中所有的元素。在碰到无限大小 的流的时候，这种操作就有用了:它们可以把无限流变成有限流。我们会在5.7节中介绍无限 流的例子。\n findAny方法 返回流中任意元素，一般与其他流操作结合使用，则立即利用短路返回\nOptional\u0026lt;Dish\u0026gt; dish = menu.stream() .filter(Dish::isVegetarian) .findAny(); 关于Optiona简单介绍  Optiona isPresent()将在Optional包含值的时候返回true, 否则返回false。 ifPresent(Consumerblock)会在值存在的时候执行给定的代码块。Consumer函数式接口让你传递一个接收T类型参数，并返回void的Lambda表达式。\nT get()会在值存在时返回值，否则抛出一个NoSuchElement异常。 T orElse(T other)会在值存在时返回值，否则返回一个默认值。\n例如：\n menu.stream() .filter(Dish::isVegetarian) .findAny() .isPresent(d -\u0026gt; System.out.println(d.getName)); findFirst()方法 查找第一个元素，例如List中数据已经排好序，则根据短路返回第一个\nList\u0026lt;Integer\u0026gt; someNumbers = Arrays.asList(1, 2, 3, 4, 5); Optional\u0026lt;Integer\u0026gt; firstSquareDivisibleByThree = someNumbers.stream() .map(x -\u0026gt; x*x) .filter(x -\u0026gt; x%3 ==0) .findFirst(); findfirst与findAny  你可能会想，为什么会同时有findFirst和findAny呢?答案是并行。找到第一个元素 在并行上限制更多。如果你不关心返回的元素是哪个，请使用findAny，因为它在使用并行流 时限制较少。\n 归约 使用reduce操作来表达更复杂的查询，比如“计算菜单中的总卡路里”或“菜单中卡路里最高的菜是哪一个”。此类查询需要将流中所有元素反复结合起来，得到一个值，比如一个Integer。这样的查询可以被归类为归约操作 (将流归约成一个值)。用函数式编程语言的术语来说，这称为折叠(fold)，因为你可以将这个操 作看成把一张长长的纸(你的流)反复折叠成一个小方块，而这就是折叠操作的结果。\n元素求和 //求和 int sum = numbers.stream().reduce(0, (a, b) -\u0026gt; a+b); //相乘 int product = numbers.stream().reduce(1,(a, b) -\u0026gt; a*b); Java 8中，Integer类增加sum静态方法来求和\nint sum = numbers.stream().reduce(0, Integer::sum); 无初始值\nOptional\u0026lt;Integer\u0026gt; sum = numbers.stream().reduce((a, b) -\u0026gt; a+b); 因为可能不存在值，所以返回的为Optional对象。\n最大值和最小值 //最大值 Optional\u0026lt;Integer\u0026gt; max = number.stream().reduce(Integer::max); Optional\u0026lt;Integer\u0026gt; min = number.stream().reduce(Integer::min); 小总结 数值流 Java 8引入三个原始类型特化流接口，IntStream、DoubleStream、LongStream. 从而避免装箱的成本。\n映射到数值流 通过mapToInt、mapToDouble、mapToLong，例如：\nint calories = menu.stream().mapToInt(Dish::getCalories).sum(); 此处mapToInt并不是返回一个Stream,而是IntStream，最终调用IntStream接口的sum()方法。\n数值流到非特化流 例如：\nIntStream intStream = menu.stream().mapToInt(Dish::getCalories); List\u0026lt;Integer\u0026gt; stream = intStream.boxed(); 默认值OptionalInt Optional同样有特化版本：OptionalInt、OptionalDouble和OptionalLong\nOptional maxCalories = menu.stream() .mapToInt(Dish::getCalories) .max(); //如果没有最大值，显式提供一个默认最大值 int max = maxCalories.orElse(1); ","permalink":"https://init.best/posts/java-stream/","summary":"Java stream apply","title":"Java stream"},{"content":"Mac software recommend\n   Software Name Function     Clash Pro \u0026hellip;   Telegram \u0026hellip;   Bob translation   Adblock plus Safari Extension   MacZip compress software   JSONPeep Safari Extension   Mounty Mobile HDD   Skim PDF reader   Hidden Bar Just like its name   Mini Calendar Calendar   IINA Player   Idea development   LyricsX lyrics   Sourcetree git tool   iHosts change host quickly   Gridea blog tool   Sourcetrail watch the code   Sequel Ace database tool   Moon FM FM   qBittorent bt   AppCleaner clean your mac when you delete software   Discord    NeatDownloadManager download tool   electerm SSH   VS Code ide   Typora markdown tool   RabiAPI API tool   Google Chrome    paw API tool   Reeder Rss Reader   iTerm terminal   Stats little tool   ublacklist for Safari Safari extension   Obsidian markdown tool   Snipaste litte tool   Logseq note tool   WPS    IDEA CE    FastClip copy tool   Charles get information   Dbeaver database tool   Zotero mange tool    ","permalink":"https://init.best/posts/macos-software/","summary":"Mac software recommend","title":"Mac software recommend"}]